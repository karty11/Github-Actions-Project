name: CD Pipeline

# on:
#   workflow_run:
#     workflows: ["CI Pipeline"]
#     types:
#       - completed
      
#   push:
#     branches:
#       - main

on:
  workflow_dispatch:  # <-- manual trigger only

jobs:
  deploy_to_kubernetes:
    runs-on: self-hosted
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config

      # ----------------------------
      # ðŸŸ¢ IRSA Setup for External Secrets
      # ----------------------------
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.67.4/terragrunt_linux_amd64 -o terragrunt
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Check versions
        run: |
         terraform -version
         terragrunt -version    

      # - name: Create external-secrets namespace
      #   run: |
      #     kubectl create namespace external-secrets || true
      # - name: Patch orphaned resources for Helm ownership
      #   run: |
      #     for sa in external-secrets-cert-controller external-secrets-webhook; do
      #       kubectl annotate serviceaccount $sa \
      #         -n external-secrets \
      #         meta.helm.sh/release-name=external-secrets \
      #         meta.helm.sh/release-namespace=external-secrets \
      #         --overwrite || echo "ServiceAccount $sa not found or already patched"
      #     done
          
      # - name: Patch orphaned ServiceAccount for Helm ownership
      #   run: |
      #     kubectl annotate serviceaccount external-secrets-cert-controller \
      #       -n external-secrets \
      #       meta.helm.sh/release-name=external-secrets \
      #       meta.helm.sh/release-namespace=external-secrets \
      #       --overwrite || echo "ServiceAccount not found or already patched"

      - name: Deploy External Secrets IRSA (Terraform)
        run: |
          cd infra/resources
          terragrunt init
          terragrunt apply --terragrunt-non-interactive -auto-approve --terragrunt-log-level debug
          
      - name: Add Helm repositories
        run: |
         helm repo add external-secrets https://charts.external-secrets.io
         helm repo update
         helm repo add argo https://argoproj.github.io/argo-helm
        
         

      - name: Deploy External Secrets
        run: |
          helm upgrade --install external-secrets external-secrets/external-secrets \
            --namespace external-secrets \
            --create-namespace \
            --values helm/bankapp-chart/external-secrets-values.yaml
            --set installCRDs=true

      - name: Deploy BankApp Chart
        run: |
          helm upgrade --install bankapp helm/bankapp-chart \
          --namespace bankapp \
          --create-namespace \
          --values helm/bankapp-chart/values.yaml
          kubectl apply -f helm/manifests/secretstore.yaml
          kubectl apply -f helm/manifests/secrets/bankapp/externalsecret-mysql.yaml
          
      # ----------------------------
      # ArgoCD + External Secrets
      # ----------------------------

      - name: Install Argo CD via Helm
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
           --namespace argocd --create-namespace \
           --values helm/bankapp-chart/argocd-values.yaml
      # - name: Install ArgoCD
      #   run: |
      #     kubectl create namespace argocd || true
      #     kubectl apply -n argocd -f https://github.com/karty11/Kube/blob/main/Project_EKS/Argocd/argocdserver.yaml
      #     kubectl rollout status deployment/argocd-server -n argocd --timeout=180s
     
      # - name: Get ArgoCD LoadBalancer IP
      #   id: get_ip
      #   run: |
      #    LB_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      #    echo "ARGOCD_LB_IP=$LB_IP" >> $GITHUB_ENV  

      - name: Apply ArgoCD Ingress
        run: kubectl apply -f helm/ingress/argocd-ingress.yaml   

      - name: Apply ESO ArgoCD Application
        run: |
          kubectl apply -f helm/applications/eso-application.yaml
          kubectl -n argocd wait application/external-secrets --for condition=Synced --timeout=600s || true
          kubectl get applications -n argocd external-secrets -o wide

      # ----------------------------
      # Deploy Your App
      # ----------------------------
      - name: Apply BankApp ArgoCD Application
        run: |
          kubectl apply -f helm/applications/bankapp-application.yaml
          kubectl -n argocd wait application/bankapp --for condition=Synced --timeout=600s || true
          kubectl get applications -n argocd bankapp -o wide
