name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  push:
    branches:
      - main
jobs:
  deploy_to_kubernetes:
    runs-on: self-hosted
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config

      # ----------------------------
      # ðŸŸ¢ IRSA Setup for External Secrets
      # ----------------------------
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.67.4/terragrunt_linux_amd64 -o terragrunt
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Check versions
        run: |
         terraform -version
         terragrunt -version    

      - name: Create external-secrets namespace
        run: |
          kubectl create namespace external-secrets || true

      - name: Deploy External Secrets IRSA (Terraform)
        run: |
          cd infra/resources
          terragrunt init
          terragrunt apply --terragrunt-non-interactive -auto-approve --terragrunt-log-level debug

      # ----------------------------
      # ArgoCD + External Secrets
      # ----------------------------
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl rollout status deployment/argocd-server -n argocd --timeout=180s

      - name: Apply ESO ArgoCD Application
        run: |
          kubectl apply -f helm/applications/eso-application.yaml
          kubectl -n argocd wait application/external-secrets --for condition=Synced --timeout=600s || true
          kubectl get applications -n argocd external-secrets -o wide

      # ----------------------------
      # Deploy Your App
      # ----------------------------
      - name: Apply BankApp ArgoCD Application
        run: |
          kubectl apply -f helm/applications/bankapp-application.yaml
          kubectl -n argocd wait application/bankapp --for condition=Synced --timeout=600s || true
          kubectl get applications -n argocd bankapp -o wide
